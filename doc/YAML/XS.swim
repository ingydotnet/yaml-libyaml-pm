YAML::XS
========

Perl YAML Serialization using XS and libyaml

<badge travis ingydotnet/yaml-libyaml-pm>

= Synopsis

  use YAML::XS;

  my $yaml = Dump [ 1..4 ];
  my $array = Load $yaml;

= Description

Kirill Siminov's `libyaml` is arguably the best YAML implementation.  The C
library is written precisely to the YAML 1.1 specification. It was originally
bound to Python and was later bound to Ruby.

This module is a Perl XS binding to libyaml which offers Perl the best YAML
support to date.

This module exports the functions `Dump`, `Load`, `DumpFile` and `LoadFile`.
These functions are intended to work exactly like `YAML.pm`'s corresponding
functions. Only `Load` and `Dump` are exported by default.

= Configuration

- `$YAML::XS::UseCode`

- `$YAML::XS::DumpCode`

- `$YAML::XS::LoadCode`

  If enabled supports deparsing and evaling of code blocks.

- `$YAML::XS::QuoteNumericStrings`

  When true (the default) strings that look like numbers but have not been
  numified will be quoted when dumping.

  This ensures leading that things like leading zeros and other formatting are
  preserved.

- `$YAML::XS::Boolean` (since v0.67)

  Default is undef.

  When set to `"JSON::PP"` or `"boolean"`, the plain (unquoted) strings `true`
  and `false` will be loaded as `JSON::PP::Boolean` or `boolean.pm` objects.
  Those objects will be dumped again as plain "true" or "false".

  It will try to load L<JSON::PP> or L<boolean> and die if it can't be loaded.

  With that it's possible to add new "real" booleans to a data structure:

      local $YAML::XS::Boolean = "JSON::PP"; # or "boolean"
      my $data = Load("booltrue: true");
      $data->{boolfalse} = JSON::PP::false;
      my $yaml = Dump($data);
      # boolfalse: false
      # booltrue: true

  It also allows to let booleans survive when loading YAML via YAML::XS and
  encode it in JSON via one of the various JSON encoders, which mostly support
  JSON::PP booleans.

  Please note that JSON::PP::Booolean and boolean.pm behave a bit differently.
  Ideally you should only use them in boolean context.

  If not set, booleans are loaded as special perl variables `PL_sv_yes` and
  `PL_sv_no`, which have the disadvantage that they are readonly, and you can't
  add those to an existing data structure with pure perl.

  If you simply need to load "perl booleans" that are true or false in boolean
  context, you will be fine with the default setting.


= Using YAML::XS with Unicode

Handling unicode properly in Perl can be a pain. YAML::XS only deals with
streams of utf8 octets. Just remember this:

  $perl = Load($utf8_octets);
  $utf8_octets = Dump($perl);

There are many, many places where things can go wrong with unicode.  If you
are having problems, use Devel::Peek on all the possible data points.

= See Also

* YAML.pm
* YAML::Syck
* YAML::Tiny

<<<cpan-tail>>>
